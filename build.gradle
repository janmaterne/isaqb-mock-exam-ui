plugins {
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'org.isaqb.onlinetrainer'
version = '0.3'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Development
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'
    compileOnly 'org.springframework.boot:spring-boot-devtools'
    
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'commons-io:commons-io:2.9.0'
    implementation 'org.asciidoctor:asciidoctorj:2.5.1'

    // H2 for caching the remote data between runs
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.h2database:h2:1.4.200' // not an in-place update to latest 2.1.210 

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.apache.commons:commons-lang3:3.12.0'
}

test {
    useJUnitPlatform()
}

bootJar {
    requiresUnpack '**/asciidoctorj-*.jar'
}


task buildImage(type:Exec) {
    commandLine 'docker', 'build', '-t', 'janmaterne/mockexam:latest', '.'
}



// Create BuildInfo-class and Batchfile with actual Version and Build-TStamp.
def buildTimeStamp = new java.text.SimpleDateFormat("yyyy.MM.dd HH:mm").format(new Date()); 
compileJava { 
    doFirst {
        ant.mkdir(dir: "${projectDir}/src/main/java/org/isaqb/onlinetrainer")
        def newBuildInfo = new File("${projectDir}/src/main/java/org/isaqb/onlinetrainer/BuildInfo.java")
        def templateBuildInfo = new File("${projectDir}/src/main/templates/org/isaqb/onlinetrainer/BuildInfo.java")

        newBuildInfo.withWriter { def writer ->
            templateBuildInfo.eachLine { def line ->
                def newLine = line.replace("__VERSION", project.version)
                                  .replace("__BUILD_TIMESTAMP", buildTimeStamp)
                writer.write(newLine + "\n")
            }
        }
        
        def versionBatchfile = new File(".version.bat")
        versionBatchfile.withWriter { def writer ->
            writer.write("set APP_VERSION=" + project.version)
        }
    }
}



var jdkBaseUrl = "https://download.java.net/java/GA/jdk17/0d483333a00540d886896bac774ff48b/35/GPL"
var downloadJdkDir = "build/downloads"
var distributionBaseDir = "build/distribution"



tasks.register("createDistributionWin32") {
    dependsOn "build"
    doLast {
        var jdkFileName = "openjdk-17_windows-x64_bin.zip"
        var destFile = "${downloadJdkDir}/${jdkFileName}"
        ant.mkdir(dir: downloadJdkDir)
        ant.get(
            src: "${jdkBaseUrl}/${jdkFileName}", 
            dest: destFile,
            skipexisting: false
        )
        ant.mkdir(dir: "${distributionBaseDir}/win32/lib")
        ant.unzip(
            src: destFile,
            dest: "${distributionBaseDir}/win32",
            overwrite: false
        )
        ant.copy(file: "src/main/bin/run.bat", todir: "${distributionBaseDir}/win32")
        ant.copy(
            file: "build/libs/${project.name}-${project.version}.jar", 
            tofile: "${distributionBaseDir}/win32/lib/onlinetrainer.jar"
        )
        ant.zip(destfile: "build/onlinetrainer-win32.zip", basedir: "${distributionBaseDir}/win32")
    }
}

tasks.register("createDistributionLinux") {
    dependsOn "build"
    doLast {
        var jdkFileName = "openjdk-17_linux-x64_bin.tar.gz"
        var destFile = "${downloadJdkDir}/${jdkFileName}"
        ant.mkdir(dir: downloadJdkDir)
        ant.get(
            src: "${jdkBaseUrl}/${jdkFileName}", 
            dest: destFile,
            skipexisting: false
        )
        ant.mkdir(dir: "${distributionBaseDir}/linux/lib")
        ant.gunzip(src: destFile, dest: "build/tmp/linux-jdk.tar")
        ant.untar(
            src: "build/tmp/linux-jdk.tar",
            dest: "${distributionBaseDir}/linux",
            overwrite: false
        )
        ant.copy(file: "src/main/bin/run.sh", todir: "${distributionBaseDir}/linux")
        ant.copy(
            file: "build/libs/${project.name}-${project.version}.jar", 
            tofile: "${distributionBaseDir}/linux/lib/onlinetrainer.jar"
        )
        ant.tar(destfile: "build/onlinetrainer-linux.tar", basedir: "${distributionBaseDir}/linux")
        ant.gzip(destfile: "build/onlinetrainer-linux.tar.gz", src: "build/onlinetrainer-linux.tar")
        new File("build/onlinetrainer-linux.tar").delete()
    }
}

tasks.register("createDistributionMacOS") {
    dependsOn "build"
    doLast {
        var jdkFileName = "openjdk-17_macos-x64_bin.tar.gz"
        var destFile = "${downloadJdkDir}/${jdkFileName}"
        ant.mkdir(dir: downloadJdkDir)
        ant.get(
            src: "${jdkBaseUrl}/${jdkFileName}", 
            dest: destFile,
            skipexisting: false
        )
        ant.mkdir(dir: "${distributionBaseDir}/macos/lib")
        ant.gunzip(src: destFile, dest: "build/tmp/macos-jdk.tar")
        ant.untar(
            src: "build/tmp/macos-jdk.tar",
            dest: "${distributionBaseDir}/macos",
            overwrite: false
        )
        ant.copy(file: "src/main/bin/run.sh", todir: "${distributionBaseDir}/macos")
        ant.copy(
            file: "build/libs/${project.name}-${project.version}.jar", 
            tofile: "${distributionBaseDir}/macos/lib/onlinetrainer.jar"
        )
        ant.tar(destfile: "build/onlinetrainer-macos.tar", basedir: "${distributionBaseDir}/macos")
        ant.gzip(destfile: "build/onlinetrainer-macos.tar.gz", src: "build/onlinetrainer-macos.tar")
        new File("build/onlinetrainer-macos.tar").delete()
    }
}

tasks.register("distribution") {
    dependsOn "createDistributionWin32", "createDistributionLinux", "createDistributionMacOS"
}

